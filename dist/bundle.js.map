{"version":3,"sources":["webpack:///webpack/bootstrap cfd6fb363fbb3d5826c2","webpack:///./src/classes/Board.js","webpack:///./src/classes/Player.js","webpack:///./src/style.scss?ad12","webpack:///./src/index.js"],"names":["Board","constructor","state","printFormattedBoard","formattedString","forEach","cell","index","slice","console","log","isEmpty","every","isFull","insert","symbol","position","getAvailableMoves","moves","push","isTerminal","Player","max_depth","nodes_map","Map","getBestMove","board","maximizing","callback","depth","name","TRACE","window","trace_ttt","clear","winner","console_styles","turn_and_available_moves","exploring_parent","exploring_child","parent_heuristic","child_heuristic","all_moves","best_move","p","join","best","child","styles","node_value","Math","max","has","get","set","arr","split","rand","floor","random","length","ret","value","min","hasClass","el","className","classList","contains","match","RegExp","addClass","add","removeClass","remove","reg","replace","drawWinningLine","direction","row","document","getElementById","setTimeout","newGame","starting_player","parseInt","b","innerHTML","html_cells","children","starting","player_turn","center_and_corners","first_choice","addEventListener","event","target","tagName","depth_choices","choice","dataset","starting_player_choices"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"dist/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap cfd6fb363fbb3d5826c2","/**\n  * @desc This class represents the board, contains methods that checks board state, insert a symbol, etc..\n  * @param {Array} state - an array representing the state of the board\n*/\nclass Board {\n    //Initializing the board\n    constructor(state = ['','','','','','','','','']) {\n        this.state = state;\n    }\n    //Logs a visualised board with the current state to the console\n    printFormattedBoard() {\n        let formattedString = '';\n        this.state.forEach((cell, index) => {\n            formattedString += cell ? ` ${cell} |` : '   |';\n            if((index + 1) % 3 == 0)  {\n                formattedString = formattedString.slice(0,-1);\n                if(index < 8) formattedString += '\\n\\u2015\\u2015\\u2015 \\u2015\\u2015\\u2015 \\u2015\\u2015\\u2015\\n';\n            }\n        });\n        console.log('%c' + formattedString, 'color: #6d4e42;font-size:16px');\n    }\n    //Checks if board has no symbols yet\n    isEmpty() {\n        return this.state.every(cell => !cell);\n    }\n    //Check if board has no spaces available\n    isFull() {\n        return this.state.every(cell => cell);\n    }\n    /**\n     * Inserts a new symbol(x,o) into\n     * @param {String} symbol \n     * @param {Number} position\n     * @return {Boolean} boolean represent success of the operation\n     */\n    insert(symbol, position) {\n        if(position > 8 || this.state[position]) return false; //Cell is either occupied or does not exist\n        this.state[position] = symbol;\n        return true;\n    }\n    //Returns an array containing available moves for the current state\n    getAvailableMoves() {\n        const moves = [];\n        this.state.forEach((cell, index) => {\n            if(!cell) moves.push(index); \n        });\n        return moves;\n    }\n    /**\n     * Checks if the board has a terminal state ie. a player wins or the board is full with no winner\n     * @return {Object} an object containing the winner, direction of winning and row number\n     */\n    isTerminal() {\n        //Return False if board in empty\n        if(this.isEmpty()) return false;\n\n        //Checking Horizontal Wins\n        if(this.state[0] == this.state[1] && this.state[0] == this.state[2] && this.state[0]) {\n            return {'winner': this.state[0], 'direction': 'H', 'row': 1};\n        }\n        if(this.state[3] == this.state[4] && this.state[3] == this.state[5] && this.state[3]) {\n            return {'winner': this.state[3], 'direction': 'H', 'row': 2};\n        }\n        if(this.state[6] == this.state[7] && this.state[6] == this.state[8] && this.state[6]) {\n            return {'winner': this.state[6], 'direction': 'H', 'row': 3};\n        }\n\n        //Checking Vertical Wins\n        if(this.state[0] == this.state[3] && this.state[0] == this.state[6] && this.state[0]) {\n            return {'winner': this.state[0], 'direction': 'V', 'row': 1};\n        }\n        if(this.state[1] == this.state[4] && this.state[1] == this.state[7] && this.state[1]) {\n            return {'winner': this.state[1], 'direction': 'V', 'row': 2};\n        }\n        if(this.state[2] == this.state[5] && this.state[2] == this.state[8] && this.state[2]) {\n            return {'winner': this.state[2], 'direction': 'V', 'row': 3};\n        }\n\n        //Checking Diagonal Wins\n        if(this.state[0] == this.state[4] && this.state[0] == this.state[8] && this.state[0]) {\n            return {'winner': this.state[0], 'direction': 'D', 'row': 1};\n        }\n        if(this.state[2] == this.state[4] && this.state[2] == this.state[6] && this.state[2]) {\n            return {'winner': this.state[2], 'direction': 'D', 'row': 2};\n        }\n\n        //If no winner but the board is full, then it's a draw\n        if(this.isFull()) {\n            return {'winner': 'draw'};\n        }\n        \n        //return false otherwise\n        return false;\n    }\n}\n\nexport default Board;\n\n\n// WEBPACK FOOTER //\n// ./src/classes/Board.js","import Board from './Board';\n\n/**\n  * @desc This class represents the computer player, contains a single method that uses minimax to get the best move\n  * @param {Number} max_depth - limits the depth of searching\n  * @param {Map} nodes_map - stores the heuristic values for each possible move\n*/\nclass Player {\n\tconstructor(max_depth = -1) {\n        this.max_depth = max_depth;\n        this.nodes_map = new Map();\n    }\n    /**\n     * Uses minimax algorithm to get the best move\n     * @param {Object} board - an instant of the board class\n     * @param {Boolean} maximizing - whether the player is a maximizing or a minimizing player\n     * @param {Function} callback - a function to run after the best move calculation is done\n     * @param {Number} depth - used internally in the function to increment the depth each recursive call\n     * @return {Number} the index of the best move\n     */\n\tgetBestMove(board, maximizing = true, callback = () => {}, depth = 0) {\n\t\t//Throw an error if the first argument is not a board\n\t\tif(board.constructor.name !== \"Board\") throw('The first argument to the getBestMove method should be an instance of Board class.');\n\t\t//Decides whether to log each tree iteration to the console\n\t\tconst TRACE = window.trace_ttt; \n\t\t//clear nodes_map if the function is called for a new move\n\t\tif(depth == 0) this.nodes_map.clear();\n\n\t\t//If the board state is a terminal one, return the heuristic value\n\t\tif(board.isTerminal() || depth == this.max_depth ) {\n\t\t\tif(board.isTerminal().winner == 'x') {\n\t\t\t\treturn 100 - depth;\n\t\t\t} else if (board.isTerminal().winner == 'o') {\n\t\t\t\treturn -100 + depth;\n\t\t\t} \n\t\t\treturn 0;\n\t\t}\n\n\t\t//Defining some styles for console logging\n\t\tconst console_styles = {\n\t\t\tturn_and_available_moves: 'background: #7f3192; color: #fff; font-size:14px;padding: 0 5px;',\n\t\t\texploring_parent: 'background: #353535;color: #fff;padding: 0 5px;font-size:18px',\n\t\t\texploring_child: 'background: #f03;color: #fff;padding: 0 5px',\n\t\t\tparent_heuristic: 'background: #26d47c; color: #fff; font-size:14px;padding: 0 5px;',\n\t\t\tchild_heuristic: 'background: #5f9ead; color: #fff; font-size:14px;padding: 0 5px;',\n\t\t\tall_moves: 'background: #e27a50;color: #fff;padding: 0 5px;font-size:14px',\n\t\t\tbest_move: 'background: #e8602a;color: #fff;padding: 0 5px;font-size:18px'\n\t\t};\n\t\t//Destructuring Styles\n\t\tconst {turn_and_available_moves, exploring_parent, exploring_child, child_heuristic, parent_heuristic, all_moves, best_move} = console_styles;\n\n\t\t//Console Tracing Code\n\t\tif(TRACE) {\n\t\t\tlet p = maximizing ? 'Maximizing' : 'Minimizing';\n\t\t\tconsole.log(`%c${p} player's turn Depth: ${depth}`, turn_and_available_moves);\n\t\t\tconsole.log(`%cAvailable Moves: ${board.getAvailableMoves().join(' ')}`, turn_and_available_moves);\n\t\t\tif(depth == 0) board.printFormattedBoard();\n\t\t}\n\n\t\t//Current player is maximizing\n\t\tif(maximizing) {\n\t\t\t//Initializ best to the lowest possible value\n\t\t\tlet best = -100;\n\t\t\t//Loop through all empty cells\n\t\t\tboard.getAvailableMoves().forEach(index => {\n\t\t\t\t//Initialize a new board with the current state (slice() is used to create a new array and not modify the original)\n\t\t\t\tlet child = new Board(board.state.slice());\n\t\t\t\t//Create a child node by inserting the maximizing symbol x into the current emoty cell\n\t\t\t\tchild.insert('x', index);\n\n\t\t\t\t//Console Tracing Code\n\t\t\t\tif(TRACE) {\n\t\t\t\t\tlet styles = (depth == 0) ? exploring_parent : exploring_child;\n\t\t\t\t\tconsole.log(`%cExploring move ${index}`, styles);\n\t\t\t\t\tchild.printFormattedBoard();\n\t\t\t\t}\n\n\t\t\t\t//Recursively calling getBestMove this time with the new board and minimizing turn and incrementing the depth\n\t\t\t\tlet node_value = this.getBestMove(child, false, callback, depth + 1);\n\t\t\t\t//Updating best value\n\t\t\t\tbest = Math.max(best, node_value);\n\n\t\t\t\t//Console Tracing Code\n\t\t\t\tif(TRACE) {\n\t\t\t\t\tif(depth == 0) {\n\t\t\t\t\t\tconsole.log(`%cMove ${index} yielded a heuristic value of ${node_value}`, parent_heuristic);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.log(`%cChild move ${index} yielded a heuristic value of ${node_value}`, child_heuristic);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//If it's the main function call, not a recursive one, map each heuristic value with it's moves indicies\n\t\t\t\tif(depth == 0) {\n\t\t\t\t\t//Comma seperated indicies if multiple moves have the same heuristic value\n\t\t\t\t\tvar moves = this.nodes_map.has(node_value) ? `${this.nodes_map.get(node_value)},${index}` : index;\n\t\t\t\t\tthis.nodes_map.set(node_value, moves);\n\t\t\t\t}\n\t\t\t});\n\t\t\t//If it's the main call, return the index of the best move or a random index if multiple indicies have the same value\n\t\t\tif(depth == 0) {\n\t\t\t\tif(typeof this.nodes_map.get(best) == 'string') {\n\t\t\t\t\tvar arr = this.nodes_map.get(best).split(',');\n\t\t\t\t\tvar rand = Math.floor(Math.random() * arr.length);\n\t\t\t\t\tvar ret = arr[rand];\n\t\t\t\t} else {\n\t\t\t\t\tret = this.nodes_map.get(best);\n\t\t\t\t}\n\t\t\t\t//Console Tracing Code\n\t\t\t\tif(TRACE) {\n\t\t\t\t\tthis.nodes_map.forEach((index,value) => {\n\t\t\t\t\t\tconsole.log(`%cMove(s) ${index} yielded ${value}`, all_moves);\n\t\t\t\t\t});\n\t\t\t\t\tconsole.log(`%cMove ${ret} was decided as the best move`, best_move);\n\t\t\t\t}\n\t\t\t\t//run a callback after calculation and return the index\n\t\t\t\tcallback(ret);\n\t\t\t\treturn ret;\n\t\t\t}\n\t\t\t//If not main call (recursive) return the heuristic value for next calculation\n\t\t\treturn best;\n\t\t}\n\n\t\tif(!maximizing) {\n\t\t\t//Initializ best to the highest possible value\n\t\t\tlet best = 100;\n\t\t\t//Loop through all empty cells\n\t\t\tboard.getAvailableMoves().forEach(index => {\n\t\t\t\t//Initialize a new board with the current state (slice() is used to create a new array and not modify the original)\n\t\t\t\tlet child = new Board(board.state.slice());\n\t\t\t\t//Create a child node by inserting the minimizing symbol o into the current emoty cell\n\t\t\t\tchild.insert('o', index);\n\n\t\t\t\t//Console Tracing Code\n\t\t\t\tif(TRACE) {\n\t\t\t\t\tlet styles = (depth == 0) ? exploring_parent : exploring_child; \n\t\t\t\t\tconsole.log(`%cExploring move ${index}`, styles);\n\t\t\t\t\tchild.printFormattedBoard();\n\t\t\t\t}\n\t\t\t\n\t\t\t\t//Recursively calling getBestMove this time with the new board and maximizing turn and incrementing the depth\n\t\t\t\tlet node_value = this.getBestMove(child, true, callback, depth + 1);\n\t\t\t\t//Updating best value\n\t\t\t\tbest = Math.min(best, node_value);\n\n\t\t\t\t//Console Tracing Code\n\t\t\t\tif(TRACE) {\n\t\t\t\t\tif(depth == 0) {\n\t\t\t\t\t\tconsole.log(`%cMove ${index} yielded a heuristic value of ${node_value}`, parent_heuristic);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.log(`%cChild move ${index} yielded a heuristic value of ${node_value}`, child_heuristic);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//If it's the main function call, not a recursive one, map each heuristic value with it's moves indicies\n\t\t\t\tif(depth == 0) {\n\t\t\t\t\t//Comma seperated indicies if multiple moves have the same heuristic value\n\t\t\t\t\tvar moves = this.nodes_map.has(node_value) ? this.nodes_map.get(node_value) + ',' + index : index;\n\t\t\t\t\tthis.nodes_map.set(node_value, moves);\n\t\t\t\t}\n\t\t\t});\n\t\t\t//If it's the main call, return the index of the best move or a random index if multiple indicies have the same value\n\t\t\tif(depth == 0) {\n\t\t\t\tif(typeof this.nodes_map.get(best) == 'string') {\n\t\t\t\t\tvar arr = this.nodes_map.get(best).split(',');\n\t\t\t\t\tvar rand = Math.floor(Math.random() * arr.length);\n\t\t\t\t\tvar ret = arr[rand];\n\t\t\t\t} else {\n\t\t\t\t\tret = this.nodes_map.get(best);\n\t\t\t\t}\n\t\t\t\t//Console Tracing Code\n\t\t\t\tif(TRACE) {\n\t\t\t\t\tthis.nodes_map.forEach((index,value) => {\n\t\t\t\t\t\tconsole.log(`%cMove(s) ${index} yielded ${value}`, all_moves);\n\t\t\t\t\t});\n\t\t\t\t\tconsole.log(`%cMove ${ret} was decided as the best move`, best_move);\n\t\t\t\t}\n\t\t\t\t//run a callback after calculation and return the index\n\t\t\t\tcallback(ret);\n\t\t\t\treturn ret;\n\t\t\t}\n\t\t\t//If not main call (recursive) return the heuristic value for next calculation\n\t\t\treturn best;\n\t\t}\n\n\t}\n}\n\nexport default Player;\n\n\n// WEBPACK FOOTER //\n// ./src/classes/Player.js","// removed by extract-text-webpack-plugin\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/style.scss\n// module id = 2\n// module chunks = 0","import Board from './classes/Board';\nimport Player from './classes/Player';\nimport './style.scss';\n\n//Helpers (from http://jaketrent.com/post/addremove-classes-raw-javascript/)\nfunction hasClass(el, className) {\n  if (el.classList)\n    return el.classList.contains(className);\n  else\n    return !!el.className.match(new RegExp('(\\\\s|^)' + className + '(\\\\s|$)'));\n}\nfunction addClass(el, className) {\n  if (el.classList)\n    el.classList.add(className);\n  else if (!hasClass(el, className)) el.className += \" \" + className;\n}\nfunction removeClass(el, className) {\n  if (el.classList)\n    el.classList.remove(className);\n  else if (hasClass(el, className)) {\n    var reg = new RegExp('(\\\\s|^)' + className + '(\\\\s|$)');\n    el.className=el.className.replace(reg, ' ');\n  }\n}\n\n/*\nHelper function that takes the object returned from isTerminal() and adds a \nclass to the board that will handle drawing the winning line's animation\n*/\nfunction drawWinningLine({ direction, row }) {\n\tlet board = document.getElementById(\"board\");\n\tboard.className = `${direction}${row}`;\n\tsetTimeout(() => { board.className += ' full'; }, 50);\n}\n\n\n//Starts a new game with a certain depth and a starting_player of 1 if human is going to start\nfunction newGame(depth = -1, starting_player = 1) {\n\t//Instantiating a new player and an empty board\n\tlet p = new Player(parseInt(depth));\n\tlet b = new Board(['','','','','','','','','']);\n\n\t//Clearing all #Board classes and populating cells HTML\n\tlet board = document.getElementById(\"board\");\n\tboard.className = '';\n\tboard.innerHTML = '<div class=\"cell-0\"></div><div class=\"cell-1\"></div><div class=\"cell-2\"></div><div class=\"cell-3\"></div><div class=\"cell-4\"></div><div class=\"cell-5\"></div><div class=\"cell-6\"></div><div class=\"cell-7\"></div><div class=\"cell-8\"></div>';\n\t\n\t//Clearing all celebrations classes\n\tremoveClass(document.getElementById(\"charachters\"), 'celebrate_human');\n\tremoveClass(document.getElementById(\"charachters\"), 'celebrate_robot');\n\n\t//Storing HTML cells in an array\n\tlet html_cells = [...board.children];\n\n\t//Initializing some variables for internal use\n\tlet starting = parseInt(starting_player),\n\t\tmaximizing = starting,\n\t\tplayer_turn = starting;\n\n\t//If computer is going to start, choose a random cell as long as it is the center or a corner\n\tif(!starting) {\n\t\tlet center_and_corners = [0,2,4,6,8];\n\t\tlet first_choice = center_and_corners[Math.floor(Math.random()*center_and_corners.length)];\n\t\tlet symbol = !maximizing ? 'x' : 'o';\n\t\tb.insert(symbol, first_choice);\n\t\taddClass(html_cells[first_choice], symbol);\n\t\tplayer_turn = 1; //Switch turns\n\t}\n\n\t//Adding Click event listener for each cell\n  \tb.state.forEach((cell, index) => {\n  \t\thtml_cells[index].addEventListener('click', () => {\n  \t\t\t//If cell is already occupied or the board is in a terminal state or it's not humans turn, return false\n  \t\t\tif(hasClass(html_cells[index], 'x') || hasClass(html_cells[index], 'o') || b.isTerminal() || !player_turn) return false;\n\n  \t\t\tlet symbol = maximizing ? 'x' : 'o'; //Maximizing player is always 'x'\n\n  \t\t\t//Update the Board class instance as well as the Board UI\n  \t\t\tb.insert(symbol, index);\n  \t\t\taddClass(html_cells[index], symbol);\n\n  \t\t\t//If it's a terminal move and it's not a draw, then human won\n  \t\t\tif(b.isTerminal()) {\n  \t\t\t\tlet { winner } = b.isTerminal();\n\t\t\t\tif(winner !== 'draw') addClass(document.getElementById(\"charachters\"), 'celebrate_human');\n  \t\t\t\tdrawWinningLine(b.isTerminal());\n  \t\t\t}\n  \t\t\tplayer_turn = 0; //Switch turns\n\n  \t\t\t//Get computer's best move and update the UI\n  \t\t\tp.getBestMove(b, !maximizing, best => {\n  \t\t\t\tlet symbol = !maximizing ? 'x' : 'o';\n  \t\t\t\tb.insert(symbol, best);\n  \t\t\t\taddClass(html_cells[best], symbol);\n  \t\t\t\tif(b.isTerminal()) {\n\t  \t\t\t\tlet { winner } = b.isTerminal();\n\t\t\t\t\tif(winner !== 'draw') addClass(document.getElementById(\"charachters\"), 'celebrate_robot');\n\t  \t\t\t\tdrawWinningLine(b.isTerminal());\n\t  \t\t\t}\n  \t\t\t\tplayer_turn = 1; //Switch turns\n  \t\t\t});\n  \t\t}, false);\n  \t\tif(cell) addClass(html_cells[index], cell);\n  \t});\n}\n\ndocument.addEventListener(\"DOMContentLoaded\", event => { \n\n\t//Start a new game when page loads with default values\n\tlet depth = -1;\n\tlet starting_player = 1;\n\tnewGame(depth, starting_player);\n\n\n\t//Events handlers for depth, starting player options\n\tdocument.getElementById(\"depth\").addEventListener(\"click\", (event) => {\n\t\tif(event.target.tagName !== \"LI\" || hasClass(event.target, 'active')) return\n\t\tlet depth_choices = [...document.getElementById(\"depth\").children[0].children];\n\t\tdepth_choices.forEach((choice) => {\n\t\t\tremoveClass(choice, 'active');\n\t\t});\n\t\taddClass(event.target, 'active');\n\t\tdepth = event.target.dataset.value;\n\t}, false);\n\n\tdocument.getElementById(\"starting_player\").addEventListener(\"click\", (event) => {\n\t\tif(event.target.tagName !== \"LI\" || hasClass(event.target, 'active')) return\n\t\tlet starting_player_choices = [...document.getElementById(\"starting_player\").children[0].children];\n\t\tstarting_player_choices.forEach((choice) => {\n\t\t\tremoveClass(choice, 'active');\n\t\t});\n\t\taddClass(event.target, 'active');\n\t\tstarting_player = event.target.dataset.value;\n\t}, false);\n\n\tdocument.getElementById(\"newgame\").addEventListener('click', () => {\n\t\tnewGame(depth, starting_player);\n\t});\n\n});\n\n\n// WEBPACK FOOTER //\n// ./src/index.js"],"sourceRoot":""}